#!/bin/bash

# This script provides a simple interface for folks to use the docker install

# Environment variables are marked as "export" such that the "docker" and "docker-compose" commands launched from this script can see them too
if [ -z "${BLOCKSTACK_TAG}" ]; then
  export TAG=latest
else
  export TAG=${BLOCKSTACK_TAG}
fi
export CORETAG="$TAG-browser"

export CORE_IMAGE=quay.io/blockstack/blockstack-core:$CORETAG
export BROWSER_IMAGE=quay.io/blockstack/blockstack-browser:$TAG

# Local Blockstack directory
if [ -z "${BLOCKSTACK_DATA}" ]; then
  export DATA_DIR="$HOME/.blockstack"
else
  export DATA_DIR=${BLOCKSTACK_DATA}
fi

# set password blank so we know when to prompt
export BLOCKSTACK_PASWD=0


create-wallet () {
  if [ $# -eq 0 ]; then
    echo "Need to input new wallet password when running setup: ./launcher create-wallet mypass"
    exit 1
  fi
  docker run --rm -v "${DATA_DIR}":/root/.blockstack $CORE_IMAGE blockstack setup -y --password $1

  # Use init containers to set the API bind to 0.0.0.0
  docker run --rm -v "${DATA_DIR}":/root/.blockstack $CORE_IMAGE sed -i 's/api_endpoint_bind = localhost/api_endpoint_bind = 0.0.0.0/' /root/.blockstack/client.ini
}

start-containers () {
  # Check for args first
  if [ $# -ne 0 ]; then
      BLOCKSTACK_PASWD=$1
  fi

  # let's see if we should create a new wallet
  if [ ! -e "$DATA_DIR/wallet.json" ]; then
    if [ $BLOCKSTACK_PASWD == "0" ]; then
      prompt-new-password
    fi
    echo "Wallet does not exist yet. Setting up wallet"
    create-wallet $BLOCKSTACK_PASWD
  fi

  # otherwise, prompt for an OLD password
  if [ $BLOCKSTACK_PASWD == "0" ]; then
    prompt-password
  fi

  # launch the containers
  docker-compose -p blockstack up -d

  if [[ $(uname) == 'Linux' ]]; then
    # let's register the protocol handler if it isn't already registered:
    create-linux-protocol-handler
    sensible-browser "http://localhost:8888/#coreAPIPassword=$BLOCKSTACK_PASWD"
  elif [[ $(uname) == 'Darwin' ]]; then
    open "http://localhost:8888/#coreAPIPassword=$BLOCKSTACK_PASWD"
  elif [[ $(uname) == 'Windows' || $(uname) == 'MINGW64_NT-10.0' ]]; then
    start "http://localhost:8888/#coreAPIPassword=$BLOCKSTACK_PASWD"
  fi
}

stop () {
  docker-compose -p blockstack stop
}

enter () {
  echo "entering docker container"
  docker-compose -p blockstack exec browser-static /bin/bash
}

logs () {
  echo "streaming logs for blockstack-api container"
  docker-compose -p blockstack logs -f browser-static
}

commands () {
  cat <<-EOF

blockstack docker launcher commands:
  pull  -> fetch docker containers from quay
  start -> start the blockstack browser server
  stop  -> stop the blockstack browser server
  logs  -> access the logs from the blockstack browser server
  enter -> exec into the running docker container

To get started, use

 $  ./Blockstack-for-Linux.sh pull
 $  ./Blockstack-for-Linux.sh start

This *requires* Docker to run.

And this will start the environment for running the Blockstack Browser

Note: the Docker containers mount your /home/<user>/.blockstack directory

EOF
}

prompt-new-password () {
  cat <<EOF


Please enter a password to protect your Blockstack core node.
IMPORTANT: This will be used to encrypt information stored within the containers
           which may include private keys for your Blockstack wallet.
           It is important that you remember this password.
           This will be the password you use to "pair" your Blockstack Browser
           with your Blockstack core node.

           Legal characters:
               letters (upper and lowercase), numbers, '_', and '-'

EOF
  echo -n "Password: " ; read -s BLOCKSTACK_PASWD ; echo
  echo -n "Repeat: " ; read -s password_repeated ; echo
  while [ "$BLOCKSTACK_PASWD" != "$password_repeated" ] ; do
    echo "Passwords do not match, please try again."
    echo -n "Password: " ; read -s BLOCKSTACK_PASWD ; echo
    echo -n "Repeat: " ; read -s password_repeated ; echo
  done
}

prompt-password () {
  echo "Enter your Blockstack Core password: " ; read -s BLOCKSTACK_PASWD; echo
}

pull () {
  docker-compose pull
}

version () {
    echo "Blockstack launcher tagged @ '$TAG'"
}

create-linux-protocol-handler () {
  HANDLER="blockstack.desktop"
  if [ ! -e "$HOME/.local/share/applications/$HANDLER" ]; then
    echo "Registering protocol handler"
    if [ ! -e "$HOME/.local/share/applications/" ]; then
      mkdir -p "$HOME/.local/share/applications/"
    fi
    cat - > "$HOME/.local/share/applications/$HANDLER" <<EOF
[Desktop Entry]
Type=Application
Terminal=false
Exec=bash -c 'xdg-open http://localhost:8888/auth?authRequest=\$(echo "%u" | sed s/blockstack://)'
Name=Blockstack-Browser
MimeType=x-scheme-handler/blockstack;
EOF
    chmod +x "$HOME/.local/share/applications/$HANDLER"
    xdg-mime default "$HANDLER" x-scheme-handler/blockstack
  fi
}

case $1 in
  create-linux-protocol-handler)
    create-linux-protocol-handler
    ;;
  stop)
    stop
    ;;
  create-wallet)
    create-wallet $2
    ;;
  start)
    start-containers $2
    ;;
  logs)
    logs
    ;;
  enter)
    enter
    ;;
  pull)
    pull
    ;;
  version)
    version
    ;;
  *)
    commands
    ;;
esac
